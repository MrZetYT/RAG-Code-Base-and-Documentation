// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RAG_Code_Base.Database;

#nullable disable

namespace RAG_Code_Base.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251018205105_AddStatusAndErrorToFileItem")]
    partial class AddStatusAndErrorToFileItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RAG_Code_Base.Models.FileItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("FileItems");
                });

            modelBuilder.Entity("RAG_Code_Base.Models.InfoBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlockType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClassName")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EndLine")
                        .HasColumnType("integer");

                    b.Property<Guid>("FileItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("HeaderSection")
                        .HasColumnType("text");

                    b.Property<string>("MethodName")
                        .HasColumnType("text");

                    b.Property<int>("StartLine")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileItemId");

                    b.ToTable("InfoBlocks");
                });

            modelBuilder.Entity("RAG_Code_Base.Models.InfoBlock", b =>
                {
                    b.HasOne("RAG_Code_Base.Models.FileItem", "FileItem")
                        .WithMany("InfoBlocks")
                        .HasForeignKey("FileItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileItem");
                });

            modelBuilder.Entity("RAG_Code_Base.Models.FileItem", b =>
                {
                    b.Navigation("InfoBlocks");
                });
#pragma warning restore 612, 618
        }
    }
}
